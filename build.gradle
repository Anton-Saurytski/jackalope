buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

plugins {
    id 'groovy'
}

version = new Version(version as String)

apply from: "gradle/ide.gradle"
apply from: "gradle/bintray.gradle"

repositories {
    jcenter()

    // Adobe-specific artifacts
    maven {
        url "http://repo.adobe.com/nexus/content/groups/public"
    }
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'


def cq_version = "5.6.2"
def jackrabbit_version = "2.6.2"

dependencies {
    compile "javax.jcr:jcr:2.0"
    compile "org.apache.jackrabbit:jackrabbit-api:${jackrabbit_version}"
    compile "org.apache.jackrabbit:jackrabbit-jcr-commons:${jackrabbit_version}"
    compile "org.apache.sling:org.apache.sling.api:2.4.3-R1488084"
    compile "org.apache.sling:org.apache.sling.jcr.api:2.1.0"
    compile "org.apache.sling:org.apache.sling.jcr.resource:2.2.8"
    compile "com.day.commons:day-commons-text:1.1.8"
    compile "com.day.cq.wcm:cq-wcm-api:${cq_version}"
    compile "com.day.cq:cq-commons:${cq_version}", {
        exclude group: 'org.apache.commons', module: 'commons-email'
    }
    compile "com.day.cq.wcm:cq-wcm-core:${cq_version}"
    compile "com.day.cq:cq-tagging:${cq_version}"
    compile "com.day.cq.dam:cq-dam-api:5.6.6"
    compile "com.day.cq.dam:cq-dam-core:5.6.14"
    compile "com.day.cq.dam:cq-dam-commons:5.6.8"
    compile "org.slf4j:slf4j-api:1.6.6"
    compile "com.google.guava:guava:11.0.1"
    compile "javax.servlet:servlet-api:2.5"
    compile "commons-io:commons-io:1.4"

    // @Nonnull @Nullable etc annotations
    compile "com.google.code.findbugs:jsr305:2.0.1"

    runtime "ch.qos.logback:logback-classic:1.0.4"

    testCompile "org.codehaus.groovy:groovy:2.3.6"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

// **************************************************************************
//
// VERSION CLASS
//
// **************************************************************************

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime


    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion - 'SNAPSHOT' + getTimestamp()
        }
        else {
            status = 'release'
            thisVersion = versionValue
        }
    }


    @SuppressWarnings("UnnecessaryQualifiedReference")
    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }


    String toString() {
        originalVersion
    }


    String getBintrayVersion() {
        thisVersion
    }

}

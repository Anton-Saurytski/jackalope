package javax.jcr;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import javax.jcr.lock.Lock;
import javax.jcr.lock.LockException;
import javax.jcr.lock.LockManager;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.nodetype.NoSuchNodeTypeException;
import javax.jcr.nodetype.NodeDefinition;
import javax.jcr.nodetype.NodeType;
import javax.jcr.version.Version;
import javax.jcr.version.VersionException;
import javax.jcr.version.VersionHistory;
import javax.jcr.version.ActivityViolationException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Calendar;

public interface Node extends Item {

    public Node addNode(String relPath) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, RepositoryException;

    public Node addNode(String relPath, String primaryNodeTypeName) throws ItemExistsException, PathNotFoundException, NoSuchNodeTypeException, LockException, VersionException, ConstraintViolationException, RepositoryException;

    public void orderBefore(String srcChildRelPath, @Nullable String destChildRelPath) throws UnsupportedRepositoryOperationException, VersionException, ConstraintViolationException, ItemNotFoundException, LockException, RepositoryException;

    public @Nullable Property setProperty(String name, @Nullable Value value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, @Nullable Value value, int type) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, Value[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, Value[] values, int type) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, String[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, String[] values, int type) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, String value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, String value, int type) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, InputStream value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, Binary value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, boolean value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, double value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, BigDecimal value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, long value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, Calendar value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Property setProperty(String name, Node value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException;

    public @Nullable Node getNode(String relPath) throws PathNotFoundException, RepositoryException;

    public NodeIterator getNodes() throws RepositoryException;

    public NodeIterator getNodes(String namePattern) throws RepositoryException;

    public NodeIterator getNodes(String[] nameGlobs) throws RepositoryException;

    public Property getProperty(String relPath) throws PathNotFoundException, RepositoryException;

    public PropertyIterator getProperties() throws RepositoryException;

    public PropertyIterator getProperties(String namePattern) throws RepositoryException;

    public PropertyIterator getProperties(String[] nameGlobs) throws RepositoryException;

    public Item getPrimaryItem() throws ItemNotFoundException, RepositoryException;

    public String getUUID() throws UnsupportedRepositoryOperationException, RepositoryException;

    public String getIdentifier() throws RepositoryException;

    public int getIndex() throws RepositoryException;

    public PropertyIterator getReferences() throws RepositoryException;

    public PropertyIterator getReferences(String name) throws RepositoryException;

    public PropertyIterator getWeakReferences() throws RepositoryException;

    public PropertyIterator getWeakReferences(String name) throws RepositoryException;

    public boolean hasNode(String relPath) throws RepositoryException;

    public boolean hasProperty(String relPath) throws RepositoryException;

    public boolean hasNodes() throws RepositoryException;

    public boolean hasProperties() throws RepositoryException;

    public NodeType getPrimaryNodeType() throws RepositoryException;

    public NodeType[] getMixinNodeTypes() throws RepositoryException;

    public boolean isNodeType(String nodeTypeName) throws RepositoryException;

    public void setPrimaryType(String nodeTypeName) throws NoSuchNodeTypeException, VersionException, ConstraintViolationException, LockException, RepositoryException;

    public void addMixin(String mixinName) throws NoSuchNodeTypeException, VersionException, ConstraintViolationException, LockException, RepositoryException;

    public void removeMixin(String mixinName) throws NoSuchNodeTypeException, VersionException, ConstraintViolationException, LockException, RepositoryException;

    public boolean canAddMixin(String mixinName) throws NoSuchNodeTypeException, RepositoryException;

    public NodeDefinition getDefinition() throws RepositoryException;

    public Version checkin() throws VersionException, UnsupportedRepositoryOperationException, InvalidItemStateException, LockException, RepositoryException;

    public void checkout() throws UnsupportedRepositoryOperationException, LockException, ActivityViolationException, RepositoryException;

    public void doneMerge(Version version) throws VersionException, InvalidItemStateException, UnsupportedRepositoryOperationException, RepositoryException;

    public void cancelMerge(Version version) throws VersionException, InvalidItemStateException, UnsupportedRepositoryOperationException, RepositoryException;

    public void update(String srcWorkspace) throws NoSuchWorkspaceException, AccessDeniedException, LockException, InvalidItemStateException, RepositoryException;

    public NodeIterator merge(String srcWorkspace, boolean bestEffort) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException;

    public String getCorrespondingNodePath(String workspaceName) throws ItemNotFoundException, NoSuchWorkspaceException, AccessDeniedException, RepositoryException;

    public NodeIterator getSharedSet() throws RepositoryException;

    public void removeSharedSet() throws VersionException, LockException, ConstraintViolationException, RepositoryException;

    public void removeShare() throws VersionException, LockException, ConstraintViolationException, RepositoryException;

    public boolean isCheckedOut() throws RepositoryException;

    public void restore(String versionName, boolean removeExisting) throws VersionException, ItemExistsException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException;

    public void restore(Version version, boolean removeExisting) throws VersionException, ItemExistsException, InvalidItemStateException, UnsupportedRepositoryOperationException, LockException, RepositoryException;

    public void restore(Version version, String relPath, boolean removeExisting) throws PathNotFoundException, ItemExistsException, VersionException, ConstraintViolationException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException;

    public void restoreByLabel(String versionLabel, boolean removeExisting) throws VersionException, ItemExistsException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException;

    public VersionHistory getVersionHistory() throws UnsupportedRepositoryOperationException, RepositoryException;

    public Version getBaseVersion() throws UnsupportedRepositoryOperationException, RepositoryException;

    public Lock lock(boolean isDeep, boolean isSessionScoped) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, InvalidItemStateException, RepositoryException;

    public Lock getLock() throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, RepositoryException;

    public void unlock() throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, InvalidItemStateException, RepositoryException;

    public boolean holdsLock() throws RepositoryException;

    public boolean isLocked() throws RepositoryException;

    public void followLifecycleTransition(String transition) throws UnsupportedRepositoryOperationException, InvalidLifecycleTransitionException, RepositoryException;

    public String[] getAllowedLifecycleTransistions() throws UnsupportedRepositoryOperationException, RepositoryException;
}
